---
- name: Pre-clean test vars
  import_tasks: cleanup.yml

- name: fail to create environment value with null value
  win_environment:
    name: "{{test_environment_name}}"
    state: present
    level: machine
  register: create_fail_null
  failed_when: 'create_fail_null.msg != "state is present but any of the following are missing: value, variables"'

- name: fail to create environment value with empty value
  win_environment:
    name: "{{test_environment_name}}"
    value: ''
    state: present
    level: machine
  register: create_fail_empty_string
  failed_when: create_fail_empty_string.msg != "When state=present, value must be defined and not an empty string, if you wish to remove the envvar, set state=absent"

- name: create test environment value for machine check
  win_environment:
    name: "{{test_environment_name}}"
    value: "{{test_machine_environment_value}}"
    state: present
    level: machine
  register: create_machine_check
  check_mode: True

- name: get value of environment key for machine after changing check
  win_command: powershell.exe "[Microsoft.Win32.Registry]::LocalMachine.OpenSubKey('SYSTEM\CurrentControlSet\Control\Session Manager\Environment', $true).GetValue('{{test_environment_name}}', $null, 'DoNotExpandEnvironmentNames')"
  register: create_machine_check_actual

- name: assert change test environment value for machine check
  assert:
    that:
    - create_machine_check is changed
    - create_machine_check_actual.stdout == ""

- name: create test environment value for machine
  win_environment:
    name: "{{test_environment_name}}"
    value: "{{test_machine_environment_value}}"
    state: present
    level: machine
  register: create_machine

- name: get value of environment key for machine after changing
  win_command: powershell.exe "[Microsoft.Win32.Registry]::LocalMachine.OpenSubKey('SYSTEM\CurrentControlSet\Control\Session Manager\Environment', $true).GetValue('{{test_environment_name}}', $null, 'DoNotExpandEnvironmentNames')"
  register: create_machine_actual

- name: assert test environment value for machine
  assert:
    that:
    - create_machine is changed
    - create_machine.before_value == None
    - create_machine_actual.stdout == "{{test_machine_environment_value}}\r\n"

- name: create test environment value for machine again
  win_environment:
    name: "{{test_environment_name}}"
    value: "{{test_machine_environment_value}}"
    state: present
    level: machine
  register: create_machine_again

- name: get value of environment key for machine after changing again
  win_command: powershell.exe "[Microsoft.Win32.Registry]::LocalMachine.OpenSubKey('SYSTEM\CurrentControlSet\Control\Session Manager\Environment', $true).GetValue('{{test_environment_name}}', $null, 'DoNotExpandEnvironmentNames')"
  register: create_machine_actual_again

- name: assert create test environment value for machine again
  assert:
    that:
    - create_machine_again is not changed
    - create_machine_again.before_value == test_machine_environment_value
    - create_machine_actual_again.stdout == "{{test_machine_environment_value}}\r\n"

- name: change test environment value for machine check
  win_environment:
    name: "{{test_environment_name}}"
    value: "{{test_new_machine_environment_value}}"
    state: present
    level: machine
  register: change_machine_check
  check_mode: True

- name: get value of environment key for machine after changing check
  win_command: powershell.exe "[Microsoft.Win32.Registry]::LocalMachine.OpenSubKey('SYSTEM\CurrentControlSet\Control\Session Manager\Environment', $true).GetValue('{{test_environment_name}}', $null, 'DoNotExpandEnvironmentNames')"
  register: change_machine_actual_check

- name: assert change test environment value for machine check
  assert:
    that:
    - change_machine_check is changed
    - change_machine_check.before_value == test_machine_environment_value
    - change_machine_actual_check.stdout == "{{test_machine_environment_value}}\r\n"

- name: change test environment value for machine
  win_environment:
    name: "{{test_environment_name}}"
    value: "{{test_new_machine_environment_value}}"
    state: present
    level: machine
  register: change_machine

- name: get value of environment key for machine after changing
  win_command: powershell.exe "[Microsoft.Win32.Registry]::LocalMachine.OpenSubKey('SYSTEM\CurrentControlSet\Control\Session Manager\Environment', $true).GetValue('{{test_environment_name}}', $null, 'DoNotExpandEnvironmentNames')"
  register: change_machine_actual

- name: assert change test environment value for machine
  assert:
    that:
    - change_machine is changed
    - change_machine.before_value == test_machine_environment_value
    - change_machine_actual.stdout == "{{test_new_machine_environment_value}}\r\n"

- name: change test environment value for machine again
  win_environment:
    name: "{{test_environment_name}}"
    value: "{{test_new_machine_environment_value}}"
    state: present
    level: machine
  register: change_machine_again

- name: get value of environment key for machine after changing again
  win_command: powershell.exe "[Microsoft.Win32.Registry]::LocalMachine.OpenSubKey('SYSTEM\CurrentControlSet\Control\Session Manager\Environment', $true).GetValue('{{test_environment_name}}', $null, 'DoNotExpandEnvironmentNames')"
  register: change_machine_actual_again

- name: assert change test environment value for machine again
  assert:
    that:
    - change_machine_again is not changed
    - change_machine_again.before_value == test_new_machine_environment_value
    - change_machine_actual_again.stdout == "{{test_new_machine_environment_value}}\r\n"

- name: create test environment value for user check
  win_environment:
    name: "{{test_environment_name}}"
    value: "{{test_user_environment_value}}"
    state: present
    level: user
  register: create_user_check
  check_mode: True

- name: get value of environment key for user after changing check
  win_command: powershell.exe "[Microsoft.Win32.Registry]::CurrentUser.OpenSubKey('Environment', $true).GetValue('{{test_environment_name}}', $null, 'DoNotExpandEnvironmentNames')"
  register: create_user_check_actual

- name: assert change test environment value for user check
  assert:
    that:
    - create_user_check is changed
    - create_user_check_actual.stdout == ""

- name: create test environment value for user
  win_environment:
    name: "{{test_environment_name}}"
    value: "{{test_user_environment_value}}"
    state: present
    level: user
  register: create_user

- name: get value of environment key for user after changing
  win_command: powershell.exe "[Microsoft.Win32.Registry]::CurrentUser.OpenSubKey('Environment', $true).GetValue('{{test_environment_name}}', $null, 'DoNotExpandEnvironmentNames')"
  register: create_user_actual

- name: assert test environment value for user
  assert:
    that:
    - create_user is changed
    - create_user.before_value == None
    - create_user_actual.stdout == "{{test_user_environment_value}}\r\n"

- name: create test environment value for user again
  win_environment:
    name: "{{test_environment_name}}"
    value: "{{test_user_environment_value}}"
    state: present
    level: user
  register: create_user_again

- name: get value of environment key for user after changing again
  win_command: powershell.exe "[Microsoft.Win32.Registry]::CurrentUser.OpenSubKey('Environment', $true).GetValue('{{test_environment_name}}', $null, 'DoNotExpandEnvironmentNames')"
  register: create_user_actual_again

- name: assert create test environment value for user again
  assert:
    that:
    - create_user_again is not changed
    - create_user_again.before_value == test_user_environment_value
    - create_user_actual_again.stdout == "{{test_user_environment_value}}\r\n"

- name: change test environment value for user check
  win_environment:
    name: "{{test_environment_name}}"
    value: "{{test_new_user_environment_value}}"
    state: present
    level: user
  register: change_user_check
  check_mode: True

- name: get value of environment key for user after changing check
  win_command: powershell.exe "[Microsoft.Win32.Registry]::CurrentUser.OpenSubKey('Environment', $true).GetValue('{{test_environment_name}}', $null, 'DoNotExpandEnvironmentNames')"
  register: change_user_actual_check

- name: assert change test environment value for user check
  assert:
    that:
    - change_user_check is changed
    - change_user_check.before_value == test_user_environment_value
    - change_user_actual_check.stdout == "{{test_user_environment_value}}\r\n"

- name: change test environment value for user
  win_environment:
    name: "{{test_environment_name}}"
    value: "{{test_new_user_environment_value}}"
    state: present
    level: user
  register: change_user

- name: get value of environment key for user after changing
  win_command: powershell.exe "[Microsoft.Win32.Registry]::CurrentUser.OpenSubKey('Environment', $true).GetValue('{{test_environment_name}}', $null, 'DoNotExpandEnvironmentNames')"
  register: change_user_actual

- name: assert change test environment value for user
  assert:
    that:
    - change_user is changed
    - change_user.before_value == test_user_environment_value
    - change_user_actual.stdout == "{{test_new_user_environment_value}}\r\n"

- name: change test environment value for user again
  win_environment:
    name: "{{test_environment_name}}"
    value: "{{test_new_user_environment_value}}"
    state: present
    level: user
  register: change_user_again

- name: get value of environment key for user after changing again
  win_command: powershell.exe "[Microsoft.Win32.Registry]::CurrentUser.OpenSubKey('Environment', $true).GetValue('{{test_environment_name}}', $null, 'DoNotExpandEnvironmentNames')"
  register: change_user_actual_again

- name: assert change test environment value for user again
  assert:
    that:
    - change_user_again is not changed
    - change_user_again.before_value == test_new_user_environment_value
    - change_user_actual_again.stdout == "{{test_new_user_environment_value}}\r\n"

# multi-value checks:
#
# single name/value option set and multi-value share implementation, so most tests above cover the bases
# including user/machine/level setting. These tests primarily check that option restrictions work and that
# the multi setting still sets all values, works in check mode, etc.

- name: set multi value check mode
  win_environment:
    state: present
    level: machine
    variables: "{{ test_multi_value_environment_values }}"
  register: multi_set
  check_mode: True

- name: check multi values after check mode
  win_shell: |
    [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey(
      'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', $true
    ).GetValue(
      '{{ item.key }}', $null, 'DoNotExpandEnvironmentNames'
    ) -eq '{{ item.value }}'
  register: multi_val
  with_dict: "{{ test_multi_value_environment_values }}"

- name: assert multi value check
  assert:
    that:
    - multi_set is changed
    - item.stdout | trim | bool == False
  with_items: "{{ multi_val.results }}"

- name: set multi value
  win_environment:
    state: present
    level: machine
    variables: "{{ test_multi_value_environment_values }}"
  register: multi_set

- name: check multi values after setting
  win_shell: |
    [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey(
      'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', $true
    ).GetValue(
      '{{ item.key }}', $null, 'DoNotExpandEnvironmentNames'
    ) -eq '{{ item.value }}'
  register: multi_val
  with_dict: "{{ test_multi_value_environment_values }}"

- name: assert multi value
  assert:
    that:
    - multi_set is changed
    - item.stdout | trim | bool == True
  with_items: "{{ multi_val.results }}"

- name: set multi value again
  win_environment:
    state: present
    level: machine
    variables: "{{ test_multi_value_environment_values }}"
  register: multi_set

- name: check multi values after setting again
  win_shell: |
    [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey(
      'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', $true
    ).GetValue(
      '{{ item.key }}', $null, 'DoNotExpandEnvironmentNames'
    ) -eq '{{ item.value }}'
  register: multi_val
  with_dict: "{{ test_multi_value_environment_values }}"

- name: assert multi value after setting again
  assert:
    that:
    - multi_set is not changed
    - item.stdout | trim | bool == True
  with_items: "{{ multi_val.results }}"

# cleanup
- name: Post-clean test vars
  import_tasks: cleanup.yml

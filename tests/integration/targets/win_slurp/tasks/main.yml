# test code for the slurp module when using winrm connection
# (c) 2014, Chris Church <chris@ninemoreminutes.com>

# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

- name: create test directory
  win_file:
    path: '{{ test_win_slurp_dir }}'
    state: directory
  notify: remove test directory

# removes reliance on win_copy, set back once win_copy supports glob like chars
- name: create test file
  win_shell: |
    $file = '{{ test_win_slurp_dir }}\slurp.txt'
    if (Test-Path -LiteralPath $file) {
        Remove-Item -LiteralPath $file -Force
    }
    Set-Content -LiteralPath $file -Value 'Slurp this!'

- name: test slurping an existing file
  slurp:
    src: '{{ test_win_slurp_dir }}\slurp.txt'
  register: slurp_existing

- name: check slurp existing result
  assert:
    that:
      - "slurp_existing.content == 'U2x1cnAgdGhpcyENCg=='"
      - "slurp_existing.encoding == 'base64'"
      - "slurp_existing is not changed"
      - "slurp_existing is not failed"

- name: test slurping a large binary file with path param and backslashes
  slurp:
    path: C:\Windows\explorer.exe
  register: slurp_path_backslashes
  no_log: true

- name: check slurp result with path param and backslashes
  assert:
    that:
      - slurp_path_backslashes.content is defined
      - slurp_path_backslashes.encoding == 'base64'
      - slurp_path_backslashes is not changed
      - slurp_path_backslashes is not failed

- name: test slurping a non-existent file
  slurp:
    src: C:\this_file_should_not_exist.txt
  register: slurp_missing
  ignore_errors: true

- name: check slurp missing result
  assert:
    that:
      - slurp_missing is failed
      - slurp_missing.msg is defined
      - slurp_missing is not changed

- name: test slurping a directory
  slurp:
    src: '{{ test_win_slurp_dir }}\missing'
  register: slurp_dir
  ignore_errors: true

- name: check slurp directory result
  assert:
    that:
      - slurp_dir is failed
      - slurp_dir.msg is defined
      - slurp_dir is not changed

- name: test slurp with missing argument
  action: slurp
  register: slurp_no_args
  ignore_errors: true

- name: check slurp with missing argument result
  assert:
    that:
      - slurp_no_args is failed
      - slurp_no_args.msg is defined
      - slurp_no_args is not changed

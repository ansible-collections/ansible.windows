- block:
  # Use single task to save on CI runtime
  - name: create test files
    win_powershell:
      error_action: stop
      parameters:
        Path: '{{ test_win_owner_path }}'
      script: |
        param($Path)

        $folders = @(
            "folder",
            "folder\folder1",
            "folder\folder2",
            "folder with space",
            "folder with space\folder1",
            "folder with space\folder2"
        )
        $tmp_dir = $Path
        if (Test-Path -LiteralPath $tmp_dir) {
            Remove-Item -LiteralPath $tmp_dir -Force -Recurse
        }
        $null = New-Item -Path $tmp_dir -ItemType Directory

        foreach ($folder in $folders) {
            $null = New-Item -Path "$tmp_dir\$folder" -ItemType Directory
        }
        $files = @(
            "folder\file.txt",
            "folder\folder1\file.txt",
            "folder\folder2\file.txt",
            "folder with space\file.txt",
            "folder with space\folder1\file.txt",
            "folder with space\folder2\file.txt"
        )
        foreach ($file in $files) {
            Set-Content -LiteralPath "$tmp_dir\$file" -Value "content"
        }

        $systemSid = New-Object -TypeName System.Security.Principal.SecurityIdentifier 'S-1-5-18'
        $systemAce = New-Object -TypeName System.Security.AccessControl.FileSystemAccessRule -ArgumentList @(
            $systemSid,
            'FullControl',
            'Allow')
        $secureFolders = @(
            "secure\folder 1\folder 2"
            "secure\folder 1"
            "secure"
        )
        $null = New-Item -Path "$tmp_dir\$($secureFolders[0])" -ItemType Directory -Force

        foreach ($folder in $secureFolders) {
            $acl = Get-Acl -LiteralPath "$tmp_dir\$folder"
            $acl.SetAccessRuleProtection($true, $false)
            $acl.AddAccessRule($systemAce)
            $acl.SetOwner($systemSid)
            Set-Acl -LiteralPath "$tmp_dir\$folder" -AclObject $acl
        }

  - name: run tests
    ansible.builtin.import_tasks: tests.yml

  always:
  - name: remove test user
    win_user:
      name: '{{ test_win_owner_user }}'
      state: absent

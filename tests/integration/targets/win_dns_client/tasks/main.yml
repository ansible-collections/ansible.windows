---
- name: Set a script to get ips for later calls
  ansible.builtin.set_fact:
    get_ip_script: |
      $adapter = Get-CimInstance -ClassName Win32_NetworkAdapter -Filter "NetConnectionID='{{ network_adapter_name }}'"
      $config = Get-CimInstance -ClassName Win32_NetworkAdapterConfiguration -Filter "Index=$($adapter.DeviceID)"
      $ips = $config.DNSServerSearchOrder
      if ($ips) {
          $config.DNSServerSearchOrder[0]
          $config.DNSServerSearchOrder[1]
      }

- name: Set a single IPv4 address (check mode)
  ansible.windows.win_dns_client:
    adapter_names: '{{ network_adapter_name }}'
    ipv4_addresses: 192.168.34.5
  register: set_single_check
  check_mode: true

- name: Get result of set a single IPv4 address (check mode)
  ansible.windows.win_shell: '{{ get_ip_script }}'
  changed_when: false
  register: set_single_actual_check

- name: Assert set a single IPv4 address (check mode)
  ansible.builtin.assert:
    that:
      - set_single_check is changed
      - set_single_actual_check.stdout_lines == []

- name: Set a single IPv4 address
  ansible.windows.win_dns_client:
    adapter_names: '{{ network_adapter_name }}'
    ipv4_addresses: 192.168.34.5
  register: set_single

- name: Get result of set a single IPv4 address
  ansible.windows.win_shell: '{{ get_ip_script }}'
  changed_when: false
  register: set_single_actual

- name: Assert set a single IPv4 address
  ansible.builtin.assert:
    that:
      - set_single is changed
      - set_single_actual.stdout_lines == ["192.168.34.5"]

- name: Set a single IPv4 address (idempotent)
  ansible.windows.win_dns_client:
    adapter_names: '{{ network_adapter_name }}'
    ipv4_addresses: 192.168.34.5
  register: set_single_again

- name: Assert set a single IPv4 address (idempotent)
  ansible.builtin.assert:
    that:
      - not set_single_again is changed

- name: Change IPv4 address to another value (check mode)
  ansible.windows.win_dns_client:
    adapter_names: '{{ network_adapter_name }}'
    ipv4_addresses: 192.168.34.6
  register: change_single_check
  check_mode: true

- name: Get result of change IPv4 address to another value (check mode)
  ansible.windows.win_shell: '{{ get_ip_script }}'
  changed_when: false
  register: check_single_actual_check

- name: Assert change IPv4 address to another value (check mode)
  ansible.builtin.assert:
    that:
      - change_single_check is changed
      - check_single_actual_check.stdout_lines == ["192.168.34.5"]

- name: Change IPv4 address to another value
  ansible.windows.win_dns_client:
    adapter_names: '{{ network_adapter_name }}'
    ipv4_addresses: 192.168.34.6
  register: change_single

- name: Get result of change IPv4 address to another value
  ansible.windows.win_shell: '{{ get_ip_script }}'
  changed_when: false
  register: check_single_actual

- name: Assert change IPv4 address to another value
  ansible.builtin.assert:
    that:
      - change_single is changed
      - check_single_actual.stdout_lines == ["192.168.34.6"]

- name: Set multiple IPv4 addresses (check mode)
  ansible.windows.win_dns_client:
    adapter_names: '{{ network_adapter_name }}'
    ipv4_addresses:
      - 192.168.34.7
      - 192.168.34.8
  register: set_multiple_check
  check_mode: true

- name: Get result of set multiple IPv4 addresses (check mode)
  ansible.windows.win_shell: '{{ get_ip_script }}'
  changed_when: false
  register: set_multiple_actual_check

- name: Assert set multiple IPv4 addresses (check mode)
  ansible.builtin.assert:
    that:
      - set_multiple_check is changed
      - set_multiple_actual_check.stdout_lines == ["192.168.34.6"]

- name: Set multiple IPv4 addresses
  ansible.windows.win_dns_client:
    adapter_names: '{{ network_adapter_name }}'
    ipv4_addresses:
      - 192.168.34.7
      - 192.168.34.8
  register: set_multiple

- name: Get result of set multiple IPv4 addresses
  ansible.windows.win_shell: '{{ get_ip_script }}'
  changed_when: false
  register: set_multiple_actual

- name: Assert set multiple IPv4 addresses
  ansible.builtin.assert:
    that:
      - set_multiple is changed
      - set_multiple_actual.stdout_lines == ["192.168.34.7", "192.168.34.8"]

- name: Set multiple IPv4 addresses (idempotent)
  ansible.windows.win_dns_client:
    adapter_names: '{{ network_adapter_name }}'
    ipv4_addresses:
      - 192.168.34.7
      - 192.168.34.8
  register: set_multiple_again

- name: Assert set multiple IPv4 addresses (idempotent)
  ansible.builtin.assert:
    that:
      - not set_multiple_again is changed

- name: Reset IPv4 DNS back to DHCP (check mode)
  ansible.windows.win_dns_client:
    adapter_names: '{{ network_adapter_name }}'
    ipv4_addresses: []
  register: set_dhcp_check
  check_mode: true

- name: Get result of reset IPv4 DNS back to DHCP (check mode)
  ansible.windows.win_shell: '{{ get_ip_script }}'
  changed_when: false
  register: set_dhcp_actual_check

- name: Assert reset IPv4 DNS back to DHCP (check mode)
  ansible.builtin.assert:
    that:
      - set_dhcp_check is changed
      - set_dhcp_actual_check.stdout_lines == ["192.168.34.7", "192.168.34.8"]

- name: Reset IPv4 DNS back to DHCP
  ansible.windows.win_dns_client:
    adapter_names: '{{ network_adapter_name }}'
    ipv4_addresses: []
  register: set_dhcp

- name: Get result of reset IPv4 DNS back to DHCP
  ansible.windows.win_shell: '{{ get_ip_script }}'
  changed_when: false
  register: set_dhcp_actual

- name: Assert reset IPv4 DNS back to DHCP
  ansible.builtin.assert:
    that:
      - set_dhcp is changed
      - set_dhcp_actual.stdout_lines == []

- name: Reset IPv4 DNS back to DHCP (idempotent)
  ansible.windows.win_dns_client:
    adapter_names: '{{ network_adapter_name }}'
    ipv4_addresses: []
  register: set_dhcp_again

- name: Assert reset IPv4 DNS back to DHCP (idempotent)
  ansible.builtin.assert:
    that:
      - set_dhcp_again is not changed

# Legacy WMI does not support setting IPv6 addresses so we can only test this on newer hosts that have the new cmdlets
- name: Check if server supports IPv6
  ansible.windows.win_shell: if (Get-Command -Name Get-NetAdapter -ErrorAction SilentlyContinue) { $true } else { $false }
  changed_when: false
  register: new_os

- name: Run IPv6 tests in a block
  when: new_os.stdout | trim | bool
  block:
    - name: Set IPv6 DNS address
      ansible.windows.win_dns_client:
        adapter_names: '{{ network_adapter_name }}'
        dns_servers:
          - 192.168.34.7
          - 192.168.34.8
          - 2001:db8::1
          - 2001:db8::2
      register: set_ipv6

    - name: Get result of set IPv6 DNS address
      ansible.windows.win_shell: (Get-DnsClientServerAddress -InterfaceAlias '{{ network_adapter_name }}').ServerAddresses
      changed_when: false
      register: set_ipv6_actual

    - name: Assert set IPv6 DNS address
      ansible.builtin.assert:
        that:
          - set_ipv6 is changed
          - set_ipv6_actual.stdout_lines == ['192.168.34.7', '192.168.34.8', '2001:db8::1', '2001:db8::2']

    - name: Set IPv6 DNS address (idempotent)
      ansible.windows.win_dns_client:
        adapter_names: '{{ network_adapter_name }}'
        dns_servers:
          - 192.168.34.7
          - 192.168.34.8
          - 2001:db8::1
          - 2001:db8::2
      register: set_ipv6_again

    - name: Assert set IPv6 DNS address (idempotent)
      ansible.builtin.assert:
        that:
          - not set_ipv6_again is changed

---
- name: Fail when source does not exist remote
  ansible.windows.win_copy:
    src: fakesource
    dest: fakedest
    remote_src: true
  register: fail_remote_invalid_source
  failed_when: "'it does not exist' not in fail_remote_invalid_source.msg"

- name: Setup source folder for remote tests
  ansible.windows.win_copy:
    src: files/
    dest: '{{ test_win_copy_path }}\source\'

- name: Setup remote failure tests
  ansible.windows.win_file:
    path: '{{ item.path }}'
    state: '{{ item.state }}'
  with_items:
    - { 'path': '{{ test_win_copy_path }}\target\folder', 'state': 'directory' }
    - { 'path': '{{ test_win_copy_path }}\target\file', 'state': 'touch' }
    - { 'path': '{{ test_win_copy_path }}\target\subdir', 'state': 'touch' }

- name: Fail source is a file but dest is a folder
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\'
    dest: '{{ test_win_copy_path }}\target\'
    remote_src: true
  register: fail_remote_folder_to_file
  failed_when: "'dest is already a file' not in fail_remote_folder_to_file.msg"

- name: Fail source is a file dest parent dir is also a file
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\foo.txt'
    dest: '{{ test_win_copy_path }}\target\file\foo.txt'
    remote_src: true
  register: fail_remote_file_parent_dir_file
  failed_when: "'is currently a file' not in fail_remote_file_parent_dir_file.msg"

- name: Fail source is a folder dest parent dir is also a file
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\subdir'
    dest: '{{ test_win_copy_path }}\target\file'
    remote_src: true
  register: fail_remote_folder_parent_dir_file
  failed_when: "'object at dest parent dir is not a folder' not in fail_remote_folder_parent_dir_file.msg"

- name: Fail to copy a remote file with parent dir that doesn't exist and filename is set
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\foo.txt'
    dest: '{{ test_win_copy_path }}\missing-dir\foo.txt'
    remote_src: true
  register: fail_remote_missing_parent_dir
  failed_when: "'does not exist' not in fail_remote_missing_parent_dir.msg"

- name: Remove target after remote failure tests
  ansible.windows.win_file:
    path: '{{ test_win_copy_path }}\target'
    state: absent

- name: Create remote target after cleaning
  ansible.windows.win_file:
    path: '{{ test_win_copy_path }}\target'
    state: directory

- name: Copy single file remote (check mode)
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\foo.txt'
    dest: '{{ test_win_copy_path }}\target\foo-target.txt'
    remote_src: true
  register: remote_copy_file_check
  check_mode: true

- name: Get result of copy single file remote (check mode)
  ansible.windows.win_stat:
    path: '{{ test_win_copy_path }}\target\foo-target.txt'
  register: remote_copy_file_actual_check

- name: Assert copy single file remote (check mode)
  ansible.builtin.assert:
    that:
      - remote_copy_file_check is changed
      - remote_copy_file_actual_check.stat.exists == False

- name: Copy single file remote
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\foo.txt'
    dest: '{{ test_win_copy_path }}\target\foo-target.txt'
    remote_src: true
  register: remote_copy_file

- name: Get result of copy single file remote
  ansible.windows.win_stat:
    path: '{{ test_win_copy_path }}\target\foo-target.txt'
  register: remote_copy_file_actual

- name: Assert copy single file remote
  ansible.builtin.assert:
    that:
      - remote_copy_file is changed
      - remote_copy_file.operation == 'file_copy'
      - remote_copy_file.checksum == 'c79a6506c1c948be0d456ab5104d5e753ab2f3e6'
      - remote_copy_file.size == 8
      - remote_copy_file.original_basename == 'foo.txt'
      - remote_copy_file_actual.stat.exists == True
      - remote_copy_file_actual.stat.checksum == 'c79a6506c1c948be0d456ab5104d5e753ab2f3e6'

- name: Copy single file remote (idempotent)
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\foo.txt'
    dest: '{{ test_win_copy_path }}\target\foo-target.txt'
    remote_src: true
  register: remote_copy_file_again

- name: Assert copy single file remote (idempotent)
  ansible.builtin.assert:
    that:
      - remote_copy_file_again is not changed

- name: Remote source is a file to a folder
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\foo.txt'
    dest: '{{ test_win_copy_path }}\target'
    remote_src: true
  register: remote_file_to_folder

- name: Get result of remote source is a file to a folder
  ansible.windows.win_stat:
    path: '{{ test_win_copy_path }}\target\foo.txt'
  register: remote_file_to_folder_actual

- name: Assert remote source is a file to a folder
  ansible.builtin.assert:
    that:
      - remote_file_to_folder is changed
      - remote_file_to_folder_actual.stat.exists

- name: Remove test file
  ansible.windows.win_file:
    path: '{{ test_win_copy_path }}\target\foo.txt'
    state: absent

- name: Copy single file into folder remote (check mode)
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\foo.txt'
    dest: '{{ test_win_copy_path }}\target\'
    remote_src: true
  register: remote_copy_file_to_folder_check
  check_mode: true

- name: Get result of copy single file into folder remote (check mode)
  ansible.windows.win_stat:
    path: '{{ test_win_copy_path }}\target\foo.txt'
  register: remote_copy_file_to_folder_actual_check

- name: Assert copy single file into folder remote (check mode)
  ansible.builtin.assert:
    that:
      - remote_copy_file_to_folder_check is changed
      - remote_copy_file_to_folder_actual_check.stat.exists == False

- name: Copy single file into folder remote
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\foo.txt'
    dest: '{{ test_win_copy_path }}\target\'
    remote_src: true
  register: remote_copy_file_to_folder

- name: Get result of copy single file into folder remote
  ansible.windows.win_stat:
    path: '{{ test_win_copy_path }}\target\foo.txt'
  register: remote_copy_file_to_folder_actual

- name: Assert copy single file into folder remote
  ansible.builtin.assert:
    that:
      - remote_copy_file_to_folder is changed
      - remote_copy_file_to_folder.operation == 'file_copy'
      - remote_copy_file_to_folder.checksum == 'c79a6506c1c948be0d456ab5104d5e753ab2f3e6'
      - remote_copy_file_to_folder.size == 8
      - remote_copy_file_to_folder.original_basename == 'foo.txt'
      - remote_copy_file_to_folder_actual.stat.exists == True
      - remote_copy_file_to_folder_actual.stat.checksum == 'c79a6506c1c948be0d456ab5104d5e753ab2f3e6'

- name: Copy single file into folder remote (idempotent)
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\foo.txt'
    dest: '{{ test_win_copy_path }}\target\'
    remote_src: true
  register: remote_copy_file_to_folder_again

- name: Assert copy single file into folder remote
  ansible.builtin.assert:
    that:
      - remote_copy_file_to_folder_again is not changed

- name: Copy single file to missing folder (check mode)
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\foo.txt'
    dest: '{{ test_win_copy_path }}\target\missing\'
    remote_src: true
  register: remote_copy_file_to_missing_folder_check
  check_mode: true

- name: Get result of copy single file to missing folder remote (check mode)
  ansible.windows.win_stat:
    path: '{{ test_win_copy_path }}\target\missing\foo.txt'
  register: remote_copy_file_to_missing_folder_actual_check

- name: Assert copy single file to missing folder remote (check mode)
  ansible.builtin.assert:
    that:
      - remote_copy_file_to_missing_folder_check is changed
      - remote_copy_file_to_missing_folder_check.operation == 'file_copy'
      - remote_copy_file_to_missing_folder_actual_check.stat.exists == False

- name: Copy single file to missing folder remote
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\foo.txt'
    dest: '{{ test_win_copy_path }}\target\missing\'
    remote_src: true
  register: remote_copy_file_to_missing_folder

- name: Get result of copy single file to missing folder remote
  ansible.windows.win_stat:
    path: '{{ test_win_copy_path }}\target\missing\foo.txt'
  register: remote_copy_file_to_missing_folder_actual

- name: Assert copy single file to missing folder remote
  ansible.builtin.assert:
    that:
      - remote_copy_file_to_missing_folder is changed
      - remote_copy_file_to_missing_folder.checksum == 'c79a6506c1c948be0d456ab5104d5e753ab2f3e6'
      - remote_copy_file_to_missing_folder.operation == 'file_copy'
      - remote_copy_file_to_missing_folder.size == 8
      - remote_copy_file_to_missing_folder_actual.stat.exists == True
      - remote_copy_file_to_missing_folder_actual.stat.checksum == 'c79a6506c1c948be0d456ab5104d5e753ab2f3e6'

- name: Clear target for folder to folder test
  ansible.windows.win_file:
    path: '{{ test_win_copy_path }}\target'
    state: absent

- name: Copy folder to folder remote (check mode)
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source'
    dest: '{{ test_win_copy_path }}\target'
    remote_src: true
  register: remote_copy_folder_to_folder_check
  check_mode: true

- name: Get result of copy folder to folder remote (check mode)
  ansible.windows.win_stat:
    path: '{{ test_win_copy_path }}\target'
  register: remote_copy_folder_to_folder_actual_check

- name: Assert copy folder to folder remote (check mode)
  ansible.builtin.assert:
    that:
      - remote_copy_folder_to_folder_check is changed
      - remote_copy_folder_to_folder_check.operation == 'folder_copy'
      - remote_copy_folder_to_folder_actual_check.stat.exists == False

- name: Copy folder to folder remote
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source'
    dest: '{{ test_win_copy_path }}\target'
    remote_src: true
  register: remote_copy_folder_to_folder

- name: Get result of copy folder to folder remote
  ansible.windows.win_find:
    paths: '{{ test_win_copy_path }}\target'
    recurse: true
    file_type: directory
  register: remote_copy_folder_to_folder_actual

- name: Assert copy folder to folder remote
  ansible.builtin.assert:
    that:
      - remote_copy_folder_to_folder is changed
      - remote_copy_folder_to_folder.operation == 'folder_copy'
      - remote_copy_folder_to_folder_actual.examined == 11
      - remote_copy_folder_to_folder_actual.matched == 6
      - remote_copy_folder_to_folder_actual.files[0].filename == 'source'
      - remote_copy_folder_to_folder_actual.files[1].filename == 'subdir'
      - remote_copy_folder_to_folder_actual.files[2].filename == 'empty'
      - remote_copy_folder_to_folder_actual.files[3].filename == 'subdir2'
      - remote_copy_folder_to_folder_actual.files[4].filename == 'subdir3'
      - remote_copy_folder_to_folder_actual.files[5].filename == 'subdir4'

- name: Copy folder to folder remote (idempotent)
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source'
    dest: '{{ test_win_copy_path }}\target'
    remote_src: true
  register: remote_copy_folder_to_folder_again

- name: Assert copy folder to folder remote (idempotent)
  ansible.builtin.assert:
    that:
      - remote_copy_folder_to_folder_again is not changed

- name: Change remote file after folder to folder test
  ansible.windows.win_copy:
    content: bar.txt
    dest: '{{ test_win_copy_path }}\target\source\foo.txt'

- name: Remote remote folder after folder to folder test
  ansible.windows.win_file:
    path: '{{ test_win_copy_path }}\target\source\subdir\subdir2\subdir3\subdir4'
    state: absent

- name: Copy folder to folder remote after change
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source'
    dest: '{{ test_win_copy_path }}\target'
    remote_src: true
  register: remote_copy_folder_to_folder_after_change

- name: Get result of copy folder to folder remote after change
  ansible.windows.win_find:
    paths: '{{ test_win_copy_path }}\target\source'
    recurse: true
    patterns: ['foo.txt', 'qux.txt']
  register: remote_copy_folder_to_folder_after_change_actual

- name: Assert copy folder after changes
  ansible.builtin.assert:
    that:
      - remote_copy_folder_to_folder_after_change is changed
      - remote_copy_folder_to_folder_after_change_actual.matched == 2
      - remote_copy_folder_to_folder_after_change_actual.files[0].checksum == 'c79a6506c1c948be0d456ab5104d5e753ab2f3e6'
      - remote_copy_folder_to_folder_after_change_actual.files[1].checksum == 'b54ba7f5621240d403f06815f7246006ef8c7d43'

- name: Clear target folder before folder contents to remote test
  ansible.windows.win_file:
    path: '{{ test_win_copy_path }}\target'
    state: absent

- name: Copy folder contents to folder remote with backslash (check mode)
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\'
    dest: '{{ test_win_copy_path }}\target'
    remote_src: true
  register: remote_copy_folder_content_backslash_check
  check_mode: true

- name: Get result of copy folder contents to folder remote with backslash (check mode)
  ansible.windows.win_stat:
    path: '{{ test_win_copy_path }}\target'
  register: remote_copy_folder_content_backslash_actual_check

- name: Assert copy folder content to folder remote with backslash (check mode)
  ansible.builtin.assert:
    that:
      - remote_copy_folder_content_backslash_check is changed
      - remote_copy_folder_content_backslash_actual_check.stat.exists == False

- name: Copy folder contents to folder remote with backslash
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\'
    dest: '{{ test_win_copy_path }}\target'
    remote_src: true
  register: remote_copy_folder_content_backslash

- name: Get result of copy folder contents to folder remote with backslash
  ansible.windows.win_find:
    paths: '{{ test_win_copy_path }}\target'
    recurse: true
    file_type: directory
  register: remote_copy_folder_content_backslash_actual

- name: Assert copy folder content to folder remote with backslash
  ansible.builtin.assert:
    that:
      - remote_copy_folder_content_backslash is changed
      - remote_copy_folder_content_backslash.operation == 'folder_copy'
      - remote_copy_folder_content_backslash_actual.examined == 10
      - remote_copy_folder_content_backslash_actual.matched == 5
      - remote_copy_folder_content_backslash_actual.files[0].filename == 'subdir'
      - remote_copy_folder_content_backslash_actual.files[1].filename == 'empty'
      - remote_copy_folder_content_backslash_actual.files[2].filename == 'subdir2'
      - remote_copy_folder_content_backslash_actual.files[3].filename == 'subdir3'
      - remote_copy_folder_content_backslash_actual.files[4].filename == 'subdir4'

- name: Copy folder contents to folder remote with backslash (idempotent)
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\'
    dest: '{{ test_win_copy_path }}\target'
    remote_src: true
  register: remote_copy_folder_content_backslash_again

- name: Assert copy folder content to folder remote with backslash (idempotent)
  ansible.builtin.assert:
    that:
      - remote_copy_folder_content_backslash_again is not changed

- name: Change remote file after folder content to folder test
  ansible.windows.win_copy:
    content: bar.txt
    dest: '{{ test_win_copy_path }}\target\foo.txt'

- name: Remote remote folder after folder content to folder test
  ansible.windows.win_file:
    path: '{{ test_win_copy_path }}\target\subdir\subdir2\subdir3\subdir4'
    state: absent

- name: Copy folder content to folder remote after change
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}/source/'
    dest: '{{ test_win_copy_path }}/target/'
    remote_src: true
  register: remote_copy_folder_content_to_folder_after_change

- name: Get result of copy folder content to folder remote after change
  ansible.windows.win_find:
    paths: '{{ test_win_copy_path }}\target'
    recurse: true
    patterns: ['foo.txt', 'qux.txt']
  register: remote_copy_folder_content_to_folder_after_change_actual

- name: Assert copy folder content to folder after changes
  ansible.builtin.assert:
    that:
      - remote_copy_folder_content_to_folder_after_change is changed
      - remote_copy_folder_content_to_folder_after_change_actual.matched == 2
      - remote_copy_folder_content_to_folder_after_change_actual.files[0].checksum == 'c79a6506c1c948be0d456ab5104d5e753ab2f3e6'
      - remote_copy_folder_content_to_folder_after_change_actual.files[1].checksum == 'b54ba7f5621240d403f06815f7246006ef8c7d43'

# https://github.com/ansible/ansible/issues/50077
- name: Create empty nested directory
  ansible.windows.win_file:
    path: '{{ test_win_copy_path }}\source\empty-nested\nested-dir'
    state: directory

- name: Copy empty nested directory (check mode)
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\empty-nested'
    dest: '{{ test_win_copy_path }}\target'
    remote_src: true
  check_mode: true
  register: copy_empty_dir_check

- name: Get result of copy empty nested directory (check mode)
  ansible.windows.win_stat:
    path: '{{ test_win_copy_path }}\target\empty-nested'
  register: copy_empty_dir_actual_check

- name: Assert copy empty nested directory (check mode)
  ansible.builtin.assert:
    that:
      - copy_empty_dir_check is changed
      - copy_empty_dir_check.operation == "folder_copy"
      - not copy_empty_dir_actual_check.stat.exists

- name: Copy empty nested directory
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\empty-nested'
    dest: '{{ test_win_copy_path }}\target'
    remote_src: true
  register: copy_empty_dir

- name: Get result of copy empty nested directory
  ansible.windows.win_stat:
    path: '{{ test_win_copy_path }}\target\empty-nested\nested-dir'
  register: copy_empty_dir_actual

- name: Assert copy empty nested directory
  ansible.builtin.assert:
    that:
      - copy_empty_dir is changed
      - copy_empty_dir.operation == "folder_copy"
      - copy_empty_dir_actual.stat.exists

- name: Copy empty nested directory (idempotent)
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\empty-nested'
    dest: '{{ test_win_copy_path }}\target'
    remote_src: true
  register: copy_empty_dir_again

- name: Assert copy empty nested directory (idempotent)
  ansible.builtin.assert:
    that:
      - not copy_empty_dir_again is changed

# https://github.com/ansible-collections/ansible.windows/issues/298
- name: Create complex dest directory
  ansible.windows.win_powershell:
    parameters:
      Path: '{{ test_win_copy_path }}\target\weird'
    error_action: stop
    script: |
      [CmdletBinding()]
      param (
          [String]
          $Path
      )

      New-Item -Path $Path -ItemType Directory | Out-Null

      cmd.exe /c mklink "$Path\missing-link-file" missing
      cmd.exe /c mklink /D "$Path\missing-link-dir" missing
      cmd.exe /c mklink /D "$Path\recursive-link" $Path
      cmd.exe /c mklink "$Path\link-file" file.txt
      New-Item -Path (Join-Path $Path "folder") -ItemType Directory | Out-Null
      $nestedFolder = New-Item -Path (Join-Path $Path "nested") -ItemType Directory
      $lockedFolder = New-Item -Path (Join-Path $Path "locked") -ItemType Directory

      [IO.File]::WriteAllText((Join-Path $Path "file.txt"), "text")
      [IO.File]::WriteAllText((Join-Path $nestedFolder "file.txt"), "text")
      [IO.File]::WriteAllText((Join-Path $lockedFolder "file.txt"), "text")

      $sd = Get-Acl -LiteralPath $lockedFolder
      $sd.SetAccessRuleProtection($true, $false)
      $sd.SetOwner([System.Security.Principal.SecurityIdentifier]'S-1-5-18')
      $sd | Set-Acl -LiteralPath $lockedFolder

- name: Copy across file to complex dest
  ansible.windows.win_copy:
    src: '{{ test_win_copy_path }}\source\foo.txt'
    dest: '{{ test_win_copy_path }}\target\weird\'
    remote_src: true
  register: copy_complex

- name: Get result of copy across file to complex dest
  ansible.windows.win_stat:
    path: '{{ test_win_copy_path }}\target\weird\foo.txt'
  register: copy_complex_actual

- name: Assert copy across file to complex dest
  ansible.builtin.assert:
    that:
      - copy_complex is changed
      - copy_complex.size == 8  # 4 bytes for copy and (4 + 4) bytes for existing files in dest
      - copy_complex_actual.stat.exists
      - copy_complex_actual.stat.checksum == 'c79a6506c1c948be0d456ab5104d5e753ab2f3e6'

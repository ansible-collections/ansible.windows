- name: create test group with missing name parameter
  win_group:
    description: My desc
  register: create_no_name
  failed_when:
  - >-
      not create_no_name.failed or
      create_no_name.msg is search("name parameter is required")

- name: create group - check mode
  win_group:
    name: '{{ test_win_group_name }}'
  register: create_check
  check_mode: true

- name: get result of create group - check mode
  win_powershell:
    script: |
      param ($Name)

      Get-LocalGroup -Name $Name -ErrorAction SilentlyContinue
    parameters:
      Name: '{{ test_win_group_name }}'
  changed_when: false
  register: create_check_actual

- name: assert create group - check mode
  assert:
    that:
    - create_check is changed
    - create_check.sid == "S-1-5-0000"
    - create_check_actual.output == []

- name: create group
  win_group:
    name: '{{ test_win_group_name }}'
  register: create

- name: get result of create group
  win_powershell:
    script: |
      param ($Name)

      Get-LocalGroup -Name $Name
    parameters:
      Name: '{{ test_win_group_name }}'
  changed_when: false
  register: create_actual

- name: assert create group
  assert:
    that:
    - create is changed
    - create.sid is defined
    - create_actual.output | length == 1
    - create_actual.output[0].Name == test_win_group_name
    - create_actual.output[0].Description == ""
    - create_actual.output[0].SID.Value == create.sid

- name: create group - idempotent
  win_group:
    name: '{{ test_win_group_name }}'
  register: create_again

- name: assert create group - idempotent
  assert:
    that:
    - not create_again is changed
    - create_again.sid == create.sid

- name: set description of existing group - check
  win_group:
    name: '{{ test_win_group_name }}'
    description: My desc
  register: set_description_check
  check_mode: true

- name: get result of set description of existing group - check mode
  win_powershell:
    script: |
      param ($Name)

      Get-LocalGroup -Name $Name
    parameters:
      Name: '{{ test_win_group_name }}'
  changed_when: false
  register: set_description_check_actual

- name: assert set description of existing group - check mode
  assert:
    that:
    - set_description_check is changed
    - set_description_check.sid == create.sid
    - set_description_check_actual.output | length == 1
    - set_description_check_actual.output[0].Name == test_win_group_name
    - set_description_check_actual.output[0].Description == ""

- name: set description of existing group
  win_group:
    name: '{{ test_win_group_name }}'
    description: My desc
  register: set_description

- name: get result of set description of existing group
  win_powershell:
    script: |
      param ($Name)

      Get-LocalGroup -Name $Name
    parameters:
      Name: '{{ test_win_group_name }}'
  changed_when: false
  register: set_description_actual

- name: assert set description of existing group
  assert:
    that:
    - set_description is changed
    - set_description.sid == create.sid
    - set_description_actual.output | length == 1
    - set_description_actual.output[0].Name == test_win_group_name
    - set_description_actual.output[0].Description == "My desc"

- name: set description of existing group - idempotent
  win_group:
    name: '{{ test_win_group_name }}'
    description: My desc
  register: set_description_again

- name: assert set description of existing group - idempotent
  assert:
    that:
    - not set_description_again is changed
    - set_description_again.sid == create.sid

- name: remove group - check mode
  win_group:
    name: '{{ test_win_group_name }}'
    state: absent
  register: remove_check
  check_mode: true

- name: get result of remove group - check mode
  win_powershell:
    script: |
      param ($Name)

      Get-LocalGroup -Name $Name
    parameters:
      Name: '{{ test_win_group_name }}'
  changed_when: false
  register: remove_check_actual

- name: assert remove group - check mode
  assert:
    that:
    - remove_check is changed
    - remove_check.sid == None
    - remove_check_actual.output | length == 1

- name: remove group
  win_group:
    name: '{{ test_win_group_name }}'
    state: absent
  register: remove

- name: get result of remove group
  win_powershell:
    script: |
      param ($Name)

      Get-LocalGroup -Name $Name -ErrorAction SilentlyContinue
    parameters:
      Name: '{{ test_win_group_name }}'
  changed_when: false
  register: remove_actual

- name: assert remove group
  assert:
    that:
    - remove is changed
    - remove.sid == None
    - remove_actual.output == []

- name: remove group - idempotent
  win_group:
    name: '{{ test_win_group_name }}'
    state: absent
  register: remove_again

- name: assert remove group - idempotent
  assert:
    that:
    - not remove_again is changed
    - remove_again.sid == None

- name: create group with desc - check mode
  win_group:
    name: '{{ test_win_group_name }}'
    description: My desc
  register: create_desc_check
  check_mode: true

- name: get result of create group with desc - check mode
  win_powershell:
    script: |
      param ($Name)

      Get-LocalGroup -Name $Name -ErrorAction SilentlyContinue
    parameters:
      Name: '{{ test_win_group_name }}'
  changed_when: false
  register: create_desc_check_actual

- name: assert create group with desc - check mode
  assert:
    that:
    - create_desc_check is changed
    - create_desc_check.sid == "S-1-5-0000"
    - create_desc_check_actual.output == []

- name: create group with desc
  win_group:
    name: '{{ test_win_group_name }}'
    description: My desc
  register: create_desc

- name: get result of create group with desc
  win_powershell:
    script: |
      param ($Name)

      Get-LocalGroup -Name $Name
    parameters:
      Name: '{{ test_win_group_name }}'
  changed_when: false
  register: create_desc_actual

- name: assert create group with desc
  assert:
    that:
    - create_desc is changed
    - create_desc.sid is defined
    - create_desc_actual.output | length == 1
    - create_desc_actual.output[0].Name == test_win_group_name
    - create_desc_actual.output[0].Description == "My desc"
    - create_desc_actual.output[0].SID.Value == create_desc.sid

- name: create group with desc - idempotent
  win_group:
    name: '{{ test_win_group_name }}'
    description: my desc
  register: create_desc_again

- name: assert create group - idempotent
  assert:
    that:
    - not create_desc_again is changed
    - create_desc_again.sid == create_desc.sid

- name: remove description from group - check mode
  win_group:
    name: '{{ test_win_group_name }}'
    description: ""
  register: remove_desc_check
  check_mode: true

- name: get result of remove description from group - check mode
  win_powershell:
    script: |
      param ($Name)

      Get-LocalGroup -Name $Name
    parameters:
      Name: '{{ test_win_group_name }}'
  changed_when: false
  register: remove_desc_check_actual

- name: assert remove description from group - check mode
  assert:
    that:
    - remove_desc_check is changed
    - remove_desc_check.sid == create_desc.sid
    - remove_desc_check_actual.output | length == 1
    - remove_desc_check_actual.output[0].Name == test_win_group_name
    - remove_desc_check_actual.output[0].Description == "My desc"

- name: remove description from group
  win_group:
    name: '{{ test_win_group_name }}'
    description: ""
  register: remove_desc

- name: get result of remove description from group
  win_powershell:
    script: |
      param ($Name)

      Get-LocalGroup -Name $Name
    parameters:
      Name: '{{ test_win_group_name }}'
  changed_when: false
  register: remove_desc_actual

- name: assert remove description from group
  assert:
    that:
    - remove_desc is changed
    - remove_desc.sid == create_desc.sid
    - remove_desc_actual.output | length == 1
    - remove_desc_actual.output[0].Name == test_win_group_name
    - remove_desc_actual.output[0].Description == ""

- name: remove description from group - idempotent
  win_group:
    name: '{{ test_win_group_name }}'
    description: ""
  register: remove_desc_again

- name: assert remove description from group - idempotent
  assert:
    that:
    - not remove_desc_again is changed
    - remove_desc_again.sid == create_desc.sid

- name: remove group for subsequent tests
  win_group:
    name: '{{ test_win_group_name }}'
    state: absent
